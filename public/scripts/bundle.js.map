{"version":3,"sources":["webpack://password_generator_browser/./node_modules/babel/index.js","webpack://password_generator_browser/./src/scripts/globals.js","webpack://password_generator_browser/./src/scripts/functions.js","webpack://password_generator_browser/./src/scripts/app.js"],"names":["Error","$parametersSwitchImg","document","querySelector","$passwordLength","$passwordParameters","$letters","$letterOptions","querySelectorAll","$digits","$specialSymbols","$customSS","$generatedPassword","$generateButton","$copyButton","$visionSwitch","$visionSwitchImg","$messageField","appSettings","loadParameters","passwordParameters","getPassword","url","URL","Object","keys","forEach","key","searchParams","append","fetch","response","json","data","status","selectors","string","error","parametersName","JSONParameters","localStorage","getItem","JSON","parse","e","console","saveParameters","setItem","stringify","applySettings","visible","hide_parameters","style","display","addEventListener","count","option","checked","id","checkedCount","length","letters","digits","special_symbols","applyPasswordParameters","password","preventDefault","select","execCommand"],"mappings":"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","file":"bundle.js","sourcesContent":["throw new Error(\"The node API for `babel` has been moved to `babel-core`.\");\n","// Selectors\nexport const $parametersSwitchImg = document.querySelector('#parameters-header img')\nexport const $passwordLength      = document.querySelector('#length')\nexport const $passwordParameters  = document.querySelector(\"#parameters\")\nexport const $letters             = document.querySelector('#letters')\nexport const $letterOptions       = document.querySelectorAll('input.letter-option')\nexport const $digits              = document.querySelector('#digits')\nexport const $specialSymbols      = document.querySelector('#special-symbols')\nexport const $customSS            = document.querySelector('#custom-special-symbols')\nexport const $generatedPassword   = document.querySelector('#generated-password')\nexport const $generateButton      = document.querySelector('#generate')\nexport const $copyButton          = document.querySelector('#copy')\nexport const $visionSwitch        = document.querySelector('#vision-switch')\nexport const $visionSwitchImg     = document.querySelector('#vision-switch img')\nexport const $messageField        = document.querySelector('#message small')","import * as selectors from './globals.js'\n\n// Load parameters\nexport let appSettings = loadParameters('app-settings')\nexport let passwordParameters = loadParameters('password-parameters')\n\n// Get password from server\nexport async function getPassword() {\n    // Setting url\n    const url = new URL(`https://password-generator-api.herokuapp.com/generate`)\n    Object.keys(passwordParameters).forEach(key => url.searchParams.append(key, passwordParameters[key]))\n\n\n    const response = await fetch(url)\n    const data     = await response.json()\n\n    if (response.status == 200) {\n        selectors.$messageField.innerText = 'Successfully generated!'\n        selectors.$messageField.style.color = 'lightgreen'\n        return await data.string\n    } else {\n        selectors.$messageField.innerText = data.error\n        selectors.$messageField.style.color = 'red'\n        return ''\n    }\n}\n\n// Loading parameters from storage\nexport function loadParameters(parametersName) {\n    try {\n        const JSONParameters   = localStorage.getItem(parametersName)\n        const loadedParameters = JSON.parse(JSONParameters)\n        return loadedParameters ? loadedParameters : {}\n    } catch (e) {\n        console.error(e)\n        return {}\n    }\n}\n\nexport function saveParameters(parametersName) {\n    localStorage.setItem(parametersName, JSON.stringify(parametersName === 'password-parameters' ? passwordParameters : appSettings))\n}\n\nexport function applySettings() {\n    if (appSettings.visible) {\n        selectors.$visionSwitchImg.src = \"images/visible.png\"\n        selectors.$visionSwitchImg.title = \"Hide password\"\n        selectors.$generatedPassword.type = \"text\"\n    } else {\n        selectors.$visionSwitchImg.src = \"images/invisible.png\"\n        selectors.$visionSwitchImg.title = \"Show password\"\n        selectors.$generatedPassword.type = \"password\"\n    }\n    if (appSettings.hide_parameters) {\n        selectors.$parametersSwitchImg.style.transform = \"rotate(0deg)\"\n        document.querySelector(\"#parameters\").style.display = \"none\"\n    } else {\n        selectors.$parametersSwitchImg.style.transform = \"rotate(90deg)\"\n        document.querySelector(\"#parameters\").style.display = \"flex\"\n    }\n}\n\nexport function applyPasswordParameters() {\n    selectors.$passwordLength.value   = passwordParameters.count\n    selectors.$letterOptions.forEach((option) => option.checked = passwordParameters[option.id])\n    const checkedCount      = document.querySelectorAll('input.letter-option:checked').length\n    selectors.$letters.indeterminate  = checkedCount > 0 && checkedCount < selectors.$letterOptions.length\n    selectors.$letters.checked        = passwordParameters.letters ? true : false\n    selectors.$digits.checked         = passwordParameters.digits ? true : false\n    if (passwordParameters.special_symbols !== 'on' && passwordParameters.special_symbols) {\n        selectors.$customSS.value = passwordParameters.special_symbols\n    }\n    selectors.$specialSymbols.checked = passwordParameters.special_symbols ? true : false\n    selectors.$customSS.disabled = !selectors.$specialSymbols.checked\n}","import {applySettings, applyPasswordParameters, saveParameters, getPassword, appSettings, passwordParameters} from './functions.js'\nimport * as selectors from './globals.js'\n\n// Setup apllication\ndocument.addEventListener('DOMContentLoaded', () => {\n    applySettings()\n    applyPasswordParameters()\n})\n\n// Hide/Show parameters switcher\ndocument.querySelector('#parameters-header').addEventListener('click', () => {\n    appSettings.hide_parameters = !appSettings.hide_parameters\n    applySettings()\n    saveParameters('app-settings')\n})\n\n// Switch visibility of generated password\nselectors.$visionSwitch.addEventListener('click', () => {\n    appSettings.visible = !appSettings.visible\n    applySettings()\n    saveParameters('app-settings')\n})\n\n// Save parameters on change\nselectors.$passwordParameters.addEventListener('input', () => {\n\n    passwordParameters.count           = selectors.$passwordLength.value\n    passwordParameters.letters         = selectors.$letters.checked ? 'on' : ''\n    selectors.$letterOptions.forEach((option) => passwordParameters[option.id]  = option.checked ? 'on' : '')\n    passwordParameters.digits          = selectors.$digits.checked         ? 'on' : ''\n    passwordParameters.special_symbols = selectors.$specialSymbols.checked ? 'on' : ''\n    selectors.$customSS.disabled = !selectors.$specialSymbols.checked\n    if (selectors.$customSS.value && !selectors.$customSS.disabled) passwordParameters.special_symbols = selectors.$customSS.value\n    saveParameters('password-parameters')\n})\n\n// Generating password\nselectors.$generateButton.addEventListener('click', async () => {\n    const password = await getPassword()\n    selectors.$generatedPassword.value = password ? password : ''\n})\n\n// Copy-to-clipboard \nselectors.$copyButton.addEventListener('click', (e) => {\n    e.preventDefault()\n    const copiedPassword = document.querySelector('#generated-password')\n    copiedPassword.select()\n    document.execCommand('copy')\n})\n\n// Nested checkboxes events\n// Thanks to naveen segaran for solution https://codepen.io/96naveen/pen/PwVMJq/?editors=1010  \nselectors.$letterOptions.forEach((option) => {\n    option.addEventListener('click', () => {\n        const checkedCount     = document.querySelectorAll('input.letter-option:checked').length\n        selectors.$letters.indeterminate = checkedCount > 0 && checkedCount < $letterOptions.length\n        selectors.$letters.checked       = checkedCount == $letterOptions.length\n    })\n})\n\nselectors.$letters.addEventListener('click', () => {\n    selectors.$letterOptions.forEach((option) => {\n        option.checked = selectors.$letters.checked\n    })\n})"],"sourceRoot":""}